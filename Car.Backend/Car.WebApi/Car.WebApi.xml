<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Car.WebApi</name>
    </assembly>
    <members>
        <member name="M:Car.WebApi.Controllers.BrandController.GetBrands">
            <summary>
            Gets the brands.
            </summary>
            <returns>The brands</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.CarController.GetAllByUserId">
            <summary>
            Gets all the cars of current user
            </summary>
            <returns>All user's cars</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.CarController.AddCar(Car.Domain.Dto.CreateCarDto)">
            <summary>
            Adds the car asynchronously.
            </summary>
            <param name="car">The car.</param>
            <returns>New car.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.CarController.GetCarById(System.Int32)">
            <summary>
            Gets the car by identifier.
            </summary>
            <param name="id">The car identifier.</param>
            <returns>The car entity</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.CarController.UpdateCar(Car.Domain.Dto.UpdateCarDto)">
            <summary>
            Updates car.
            </summary>
            <param name="updateCarModel">The car.</param>
            <returns>The updated car.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.CarController.DeleteAsync(System.Int32)">
            <summary>
            deletes car by identifier
            </summary>
            <param name="id">car Id</param>
            <returns>ok</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.ChatController.GetUserChats">
            <summary>
            Get the current user chats
            </summary>
            <returns>Chats of Sender by Id</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.ChatController.GetChat(System.Int32,System.Int32)">
            <summary>
            Get chat by Chat Id
            </summary>
            <param name="id">Chat identifier</param>
            <param name="previousMessageId">Oldest message identifier</param>
            <returns>Chat</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.ChatController.GetFiltered(Car.Domain.Filters.ChatFilter)">
            <summary>
            Filters chats by conditions
            </summary>
            <param name="filter">Chat filter parameters</param>
            <returns>Messages</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.GetPast">
            <summary>
            Looks for information about past journeys where current user is participant or driver
            </summary>
            <returns>status of request with appropriate data</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.GetUpcoming">
            <summary>
            Looks for information about all upcoming journeys where current user is participant or driver
            </summary>
            <returns>status of request with appropriate data</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.GetScheduled">
            <summary>
            Looks for information about all scheduled journeys where current user is participant or driver
            </summary>
            <returns>status of request with appropriate data</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.GetJourneyById(System.Int32,System.Boolean)">
            <summary>
            Gets journey by identifier.
            </summary>
            <param name="id">Journey identifier</param>
            <param name="isJourneyCanceled">Include journey cancelation status</param>
            <returns>Journey</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.GetRecentAddresses">
            <summary>
            Gets recent addresses by identifier.
            </summary>
            <returns>recent addresses</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.GetCanceled">
            <summary>
            Gets canceled journey.
            </summary>
            <returns>canceled journeys</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.GetRequested">
            <summary>
            Gets requested journey.
            </summary>
            <returns>requested journeys</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.AddJourney(Car.Domain.Dto.JourneyDto)">
            <summary>
            Adds the journey asynchronously.
            </summary>
            <param name="journeyDto">The journey model.</param>
            <returns>Added journey.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.AddScheduledJourney(Car.Domain.Dto.Journey.ScheduleDto)">
            <summary>
            Adds the scheduled journey asynchronously.
            </summary>
            /// <param name="scheduleDto">The schedule model.</param>
            <returns>Added scheduled journey.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.AddSchedule(Car.Domain.Dto.JourneyDto)">
            <summary>
            Adds the scheduleDto asynchronously.
            </summary>
            <param name="journeyDto">The journey model.</param>
            <returns>Added schedule.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.GetFiltered(Car.Domain.Filters.JourneyFilter)">
            <summary>
            Returns journeys filtered by given conditions.
            </summary>
            <param name="journeyFilterModel">Model that contains needed parameters to filter by</param>
            <returns>Collection of filtered journeys.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.Delete(System.Int32)">
            <summary>
            deletes journey by identifier
            </summary>
            <param name="id">journey Id</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.UpdateRoute(Car.Domain.Dto.JourneyDto)">
            <summary>
            Update the journey route asynchronously.
            </summary>
            <param name="journey">The journey dto.</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.UpdateDetails(Car.Domain.Dto.JourneyDto)">
            <summary>
            Update the journey details asynchronously.
            </summary>
            <param name="journey">The journey dto.</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.UpdateInvitation(Car.Domain.Dto.InvitationDto)">
            <summary>
            Update the journey invitation asynchronously.
            </summary>
            <param name="invitation">The journey dto.</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.CancelJourney(System.Int32)">
            <summary>
            Cancels journey
            </summary>
            <param name="id">id of journey that should be cancelled</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.IsCanceled(System.Int32)">
            <summary>
            Defines if journey was canceled
            </summary>
            <param name="id">id of journey</param>
            <returns>bool value that indicates whether journey was canceled</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.DeleteUserFromJourney(System.Int32,System.Int32)">
            <summary>
            Deletes user from journey
            </summary>
            <param name="journeyId">journey Id</param>
            <param name="userId">user Id</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyController.AddUserToJourney(Car.Domain.Models.Journey.JourneyApplyModel)">
            <summary>
            Adds user to journey
            </summary>
            <param name="journeyApply">Journey Apply Model</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyUserController.GetJourneyUserById(System.Int32,System.Int32)">
            <summary>
            Get JourneyUser by identifiers.
            </summary>
            <param name="journeyId">Journey identifier</param>
            <param name="userId">User identifier</param>
            <returns>JourneyUserDTO</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyUserController.HasBaggage(System.Int32,System.Int32)">
            <summary>
            Defines if JourneyUser has a baggage
            </summary>
            <param name="journeyId">Journey identifier</param>
            <param name="userId">User identifier</param>
            <returns>bool value that indicates whether JourneyUser has a baggage</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyUserController.Update(Car.Domain.Dto.JourneyUserDto)">
            <summary>
            Updates the JourneyUser asynchronously
            </summary>
            <param name="journeyUser">JourneyUser DTO</param>
            <returns>OkResult with updated JourneyUser</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.JourneyUserController.UpdateWithBaggage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set value of the withBaggage property
            </summary>
            <param name="journeyId">Journey identifier</param>
            <param name="userId">User identifier</param>
            <param name="withBaggage">New value of the withBaggage property</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.LocationController.GetAllByUserId">
            <summary>
            Gets all the locations of current user
            </summary>
            <returns>All user's locations</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.LocationController.Add(Car.Domain.Dto.Location.CreateLocationDto)">
            <summary>
            Adds the location.
            </summary>
            <param name="location">The location.</param>
            <returns>New location</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.LocationController.UpdateAsync(Car.Domain.Dto.Location.UpdateLocationDto)">
            <summary>
            updates location
            </summary>
            <param name="location">location to be updated</param>
            <returns>updated location</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.LocationController.Get(System.Int32)">
            <summary>
            Gets the location by identifier.
            </summary>
            <param name="id">The location identifier.</param>
            <returns>The location entity</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.LocationController.DeleteAsync(System.Int32)">
            <summary>
            deletes location by identifier
            </summary>
            <param name="id">location Id</param>
            <returns>ok</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.LocationTypeController.GetAll">
            <summary>
            Gets all location types.
            </summary>
            <returns>All the models</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.LoginController.Login">
            <summary>
            ensures the user and returns a User for client app,
            if user doesn't exist in DB it creates a user and saves them to DB
            </summary>
            <returns>User for a client app</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.ModelController.GetAll(System.Int32)">
            <summary>
            Gets all models.
            </summary>
            <param name="id">The brand identifier.</param>
            <returns>All the models</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.NotificationController.GetNotificationAsync(System.Int32)">
            <summary>
            gets a notification by given id Asynchronously
            </summary>
            <param name="id">notification id</param>
            <returns>notification</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.NotificationController.GetNotificationsAsync">
            <summary>
            gets all user notifications
            </summary>
            <returns>list of user notifications</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.NotificationController.GetUnreadNotificationsNumberAsync">
            <summary>
            gets user unread notifications number
            </summary>
            <returns>int number</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.NotificationController.AddNotificationAsync(Car.Domain.Dto.CreateNotificationDto)">
            <summary>
            adds new user notification Asynchronously
            </summary>
            <param name="createNotificationModel">notification itself to be updated</param>
            // Args:
            //    JSON String
            //
            // JSON STRUCTURE
            //      VARIABLE           TYPE            DESC
            // {
            //      "senderId":        //number        Specifies the sender of the notification
            //      , "receiverId":    //number        Specifies the receiver of the notification
            //      , "type":          //number        Specifies the type of the notification
            //                         //              based on the following enum:
            //                         //
            //                         //              1 PassengerApply
            //                         //              2 ApplicationApproval
            //                         //              3 JourneyCancellation
            //                         //              4 JourneyDetailsUpdate
            //                         //              5 JourneyInvitation
            //                         //              6 AcceptedInvitation
            //                         //              7 RejectedInvitation
            //                         //              8 PassengerWithdrawal
            //                         //              9 HRMarketingMessage
            //                         //              0 HRMarketingSurvey
            //                         //
            //      , "jsonData":      //string        Specifies notification's specific JSON structure
            //                         //
            //                         //              BELOW LISTED STRUCTURE FOR NOTIFICATION TYPE 1 (PassengerApply)
            //      "{                 //
            //        \"title\":       //string        Specifies the title of the notification at the notification tab
            //        \"comments\":    //string?       Specifies the participant's comment (if any) at the modal page
            //        \"hasLuggage\":  //boolean?      Specifies if the participant has any luggage
            //      }"
            // }
            <returns>added notification</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.NotificationController.DeleteAsync(System.Int32)">
            <summary>
            deletes notification by identifier
            </summary>
            <param name="id">notification Id</param>
            <returns>ok</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.NotificationController.MarkNotificationAsReadAsync(System.Int32)">
            <summary>
            Marks notification as read Asynchronously
            </summary>
            <param name="notificationId">notification Id</param>
            <returns>amended notification</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.ReceivedMessagesController.MarkMessagesRead(System.Int32)">
            <summary>
            Mark specified chat messages as read
            </summary>
            <param name="chatId">Chat identifier</param>
            <returns>number of marked messages</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.ReceivedMessagesController.GetAllUnreadMessagesNumber">
            <summary>
            Counts number of all unread messages of the user
            </summary>
            <returns>Number of all unread messages</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.RequestController.Get(System.Int32)">
            <summary>
            Gets the request by identifier.
            </summary>
            <param name="id">Unique identifier.</param>
            <returns>Request.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.RequestController.Add(Car.Domain.Dto.RequestDto)">
            <summary>
            Adds new request.
            </summary>
            <param name="request">Request that will be added.</param>
            <returns>Added request.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.RequestController.Delete(System.Int32)">
            <summary>
            Removes request by its identifier.
            </summary>
            <param name="id">Unique identifier.</param>
            <returns>Ok result.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.RequestController.GetByUserId">
            <summary>
            Gets requests of current user.
            </summary>
            <returns>Collection of requests</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.UserController.GetUserById(System.Int32)">
            <summary>
            Gets the user by identifier asynchronously.
            </summary>
            <param name="id">The user identifier.</param>
            <returns>The user entity</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.UserController.GetAllUsers">
            <summary>
            Gets all users.
            </summary>
            <returns>All users</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.UserController.UpdateUserImage(Car.Domain.Dto.UpdateUserImageDto)">
            <summary>
            Updates a users image with the identifier asynchronously.
            </summary>
            <param name="updateUserImageDto">User object to update.</param>
            <returns>Updated user.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.UserController.AcceptPrivacyPolicy">
            <summary>
            Accept privacy policy and terms of use for logged user.
            </summary>
            <returns>Updated user.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.UserController.AddUserFcmtoken(Car.Domain.Dto.UserFcmTokenDto)">
            <summary>
            Adds fcmtoken to user asynchronously.
            </summary>
            <param name="userFCMTokenDto">fcm token to add.</param>
            <returns>Updated user.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.UserController.DeleteUserFcmtoken(System.String)">
            <summary>
            Removes fcmtoken from user asynchronously.
            </summary>
            <param name="token">fcm token to delete.</param>
            <returns>Updated user.</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.UserPreferencesController.GetPreferences(System.Int32)">
            <summary>
            returns the preferences for user
            </summary>
            <param name ="id">User identifier</param>
            <returns>user preferences</returns>
        </member>
        <member name="M:Car.WebApi.Controllers.UserPreferencesController.UpdatePreferences(Car.Domain.Dto.UserPreferencesDto)">
            <summary>
            updates preferences
            </summary>
            <param name="preferences">preferences to be updated</param>
            <returns>updated preference</returns>
        </member>
    </members>
</doc>
