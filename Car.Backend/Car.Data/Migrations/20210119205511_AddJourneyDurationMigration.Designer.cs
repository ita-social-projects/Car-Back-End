// <auto-generated />
using System;
using Car.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Car.Data.Migrations
{
    [DbContext(typeof(CarContext))]
    [Migration("20210119205511_AddJourneyDurationMigration")]
    partial class AddJourneyDurationMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Car.Data.Entities.Address", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .UseIdentityColumn();

                b.Property<string>("City")
                    .HasColumnType("nvarchar(max)");

                b.Property<double>("Latitude")
                    .HasColumnType("float");

                b.Property<double>("Longitude")
                    .HasColumnType("float");

                b.Property<string>("Street")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Addresses");
            });

            modelBuilder.Entity("Car.Data.Entities.Car", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .UseIdentityColumn();

                b.Property<string>("Brand")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Color")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ImageId")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Model")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PlateNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Cars");
            });

            modelBuilder.Entity("Car.Data.Entities.Journey", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .UseIdentityColumn();

                b.Property<string>("Comments")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("CountOfSeats")
                    .HasColumnType("int");

                b.Property<DateTime>("DepartureTime")
                    .HasColumnType("datetime2");

                b.Property<int?>("DriverId")
                    .HasColumnType("int");

                b.Property<bool>("IsFree")
                    .HasColumnType("bit");

                b.Property<TimeSpan>("JourneyDuration")
                    .HasColumnType("time");

                b.Property<int>("RouteDistance")
                    .HasColumnType("int");

                b.Property<int?>("ScheduleId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("DriverId");

                b.HasIndex("ScheduleId")
                    .IsUnique()
                    .HasFilter("[ScheduleId] IS NOT NULL");

                b.ToTable("Journeys");
            });

            modelBuilder.Entity("Car.Data.Entities.Message", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .UseIdentityColumn();

                b.Property<DateTime>("CreateAt")
                    .HasColumnType("datetime2");

                b.Property<int>("ReceiverId")
                    .HasColumnType("int");

                b.Property<int>("SenderId")
                    .HasColumnType("int");

                b.Property<string>("Text")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("ReceiverId");

                b.HasIndex("SenderId");

                b.ToTable("Messages");
            });

            modelBuilder.Entity("Car.Data.Entities.Notification", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .UseIdentityColumn();

                b.Property<DateTime>("CreateAt")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("IsRead")
                    .HasColumnType("bit");

                b.Property<int?>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Notifications");
            });

            modelBuilder.Entity("Car.Data.Entities.Schedule", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .UseIdentityColumn();

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Schedule");
            });

            modelBuilder.Entity("Car.Data.Entities.Stop", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .UseIdentityColumn();

                b.Property<int>("AddressId")
                    .HasColumnType("int");

                b.Property<int>("JourneyId")
                    .HasColumnType("int");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("AddressId")
                    .IsUnique();

                b.HasIndex("JourneyId");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("Stops");
            });

            modelBuilder.Entity("Car.Data.Entities.Sender", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .UseIdentityColumn();

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("HireDate")
                    .HasColumnType("datetime2");

                b.Property<string>("ImageId")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Location")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Position")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Surname")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("Email")
                    .IsUnique()
                    .HasFilter("[Email] IS NOT NULL");

                b.ToTable("Sender");
            });

            modelBuilder.Entity("Car.Data.Entities.UserJourney", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.Property<int>("JourneyId")
                    .HasColumnType("int");

                b.HasKey("UserId", "JourneyId");

                b.HasIndex("JourneyId");

                b.ToTable("UserJourney");
            });

            modelBuilder.Entity("Car.Data.Entities.UserPreferences", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .UseIdentityColumn();

                b.Property<string>("Comments")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("DoAllowEating")
                    .HasColumnType("bit");

                b.Property<bool>("DoAllowSmoking")
                    .HasColumnType("bit");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("UserPreferences");
            });

            modelBuilder.Entity("Car.Data.Entities.Car", b =>
            {
                b.HasOne("Car.Data.Entities.Sender", "Owner")
                    .WithMany("UserCars")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Owner");
            });

            modelBuilder.Entity("Car.Data.Entities.Journey", b =>
            {
                b.HasOne("Car.Data.Entities.Sender", "Driver")
                    .WithMany("DriverJourney")
                    .HasForeignKey("DriverId");

                b.HasOne("Car.Data.Entities.Schedule", "Schedule")
                    .WithOne("Journey")
                    .HasForeignKey("Car.Data.Entities.Journey", "ScheduleId");

                b.Navigation("Driver");

                b.Navigation("Schedule");
            });

            modelBuilder.Entity("Car.Data.Entities.Message", b =>
            {
                b.HasOne("Car.Data.Entities.Sender", "Receiver")
                    .WithMany("ReceivedMessages")
                    .HasForeignKey("ReceiverId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("Car.Data.Entities.Sender", "Sender")
                    .WithMany("SentMessages")
                    .HasForeignKey("SenderId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Receiver");

                b.Navigation("Sender");
            });

            modelBuilder.Entity("Car.Data.Entities.Notification", b =>
            {
                b.HasOne("Car.Data.Entities.Sender", "Sender")
                    .WithMany("UserNotifications")
                    .HasForeignKey("UserId");

                b.Navigation("Sender");
            });

            modelBuilder.Entity("Car.Data.Entities.Stop", b =>
            {
                b.HasOne("Car.Data.Entities.Address", "Address")
                    .WithOne("Stop")
                    .HasForeignKey("Car.Data.Entities.Stop", "AddressId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Car.Data.Entities.Journey", "Journey")
                    .WithMany("UserStops")
                    .HasForeignKey("JourneyId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Car.Data.Entities.Sender", "Sender")
                    .WithOne("UserStop")
                    .HasForeignKey("Car.Data.Entities.Stop", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Address");

                b.Navigation("Journey");

                b.Navigation("Sender");
            });

            modelBuilder.Entity("Car.Data.Entities.UserJourney", b =>
            {
                b.HasOne("Car.Data.Entities.Journey", "Journey")
                    .WithMany("Participants")
                    .HasForeignKey("JourneyId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Car.Data.Entities.Sender", "Sender")
                    .WithMany("UserJourneys")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Journey");

                b.Navigation("Sender");
            });

            modelBuilder.Entity("Car.Data.Entities.UserPreferences", b =>
            {
                b.HasOne("Car.Data.Entities.Sender", null)
                    .WithOne("UserPreferences")
                    .HasForeignKey("Car.Data.Entities.UserPreferences", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Car.Data.Entities.Address", b =>
            {
                b.Navigation("Stop");
            });

            modelBuilder.Entity("Car.Data.Entities.Journey", b =>
            {
                b.Navigation("Participants");

                b.Navigation("UserStops");
            });

            modelBuilder.Entity("Car.Data.Entities.Schedule", b =>
            {
                b.Navigation("Journey");
            });

            modelBuilder.Entity("Car.Data.Entities.Sender", b =>
            {
                b.Navigation("DriverJourney");

                b.Navigation("ReceivedMessages");

                b.Navigation("SentMessages");

                b.Navigation("UserCars");

                b.Navigation("UserJourneys");

                b.Navigation("UserNotifications");

                b.Navigation("UserPreferences");

                b.Navigation("UserStop");
            });
#pragma warning restore 612, 618
        }
    }
}
