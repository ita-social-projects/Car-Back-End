# This is a basic workflow to help you get started with Actions

name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      AZURE_WEBAPP_NAME: cartestapp    # set this to your application's name
      AZURE_WEBAPP_PACKAGE_PATH: '.' 
      

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - name: Restore dependencies
      run: dotnet restore --interactive
      working-directory: CarBackEnd
    - name: Build
      run: dotnet build --configuration Release
      working-directory: CarBackEnd/CarBackEnd
    - name: Test
      run: dotnet test --verbosity normal 
      working-directory: CarBackEnd/Car.Tests
  sonarscan:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
     #SonarScan
    - name: SonarScanner for .NET Core with pull request decoration support
      uses: highbyte/sonarscan-dotnet@1.0.2
      with:
        # The key of the SonarQube project
        sonarProjectKey: SplinterRAT_Car-Back-End
        # The name of the SonarQube project
        sonarProjectName:  Car-Back-End
        # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
        sonarOrganization: testcar
        dotnetBuildArguments: ./CarBackEnd 
        dotnetTestArguments: ./CarBackEnd/Car.Tests /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        sonarBeginArguments:: begin /o:testcar /k:SplinterRAT_Car-Back-End /d:sonar.cs.opencover.reportsPaths="src/ApplicationTest/coverage.opencover.xml" /d:sonar.host.url=https://sonarcloud.io 
